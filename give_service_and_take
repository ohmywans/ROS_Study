Service / Service server / Service client
Same order by 'make_pkg'. So, I wrote the terminal code shortly. But It is different that the file 'Package.xml' and 'CMakeLists.txt'.

#####1. Make Package.
$ cd ~/catkin_ws/src
$ catkin_create_pkg ros_tutorials_service message_generation std_msgs roscpp
$ cd ros_tutorials_service
$ ls

#####2. Modify 'package.xml' and 'CMakeLists.txt'.
$ gedit package.xml
$ gedit CMakeLists.txt

#####3. Writing Service file.
$ roscd ros_tutorials_service → 패키지 폴더로 이동
$ mkdir srv → 패키지에 srv라는 서비스 폴더를 신규 작성
$ cd srv → 작성한 srv 폴더로 이동
$ gedit SrvTutorial.srv → SrvTutorial.srv 파일 신규 작성 및 내용 수정
int64 a
int64 b
---
int64 result

#####4. Writing Service server node.
$ roscd ros_tutorials_service/src → 패키지의 소스 폴더인 src 폴더로 이동
$ gedit service_server.cpp → 소스 파일 신규 작성 및 내용 수정

#####5. Writing Service client node.
$ roscd ros_tutorials_service/src → 패키지의 소스 폴더인 src 폴더로 이동
$ gedit service_client.cpp → 소스 파일 신규 작성 및 내용 수정

#####6. ROS node build.
$ cd ~/catkin_ws
$ catkin_make

#####7. Run Service server. Basic : roscore
$ cd ~/catkin_ws/src
$ rosrun ros_tutorials_service service_server
[INFO] [1495726541.268629564]: ready srv server!

#####8. Run Service client.
$ rosrun ros_tutorials_service service_client 2 3
[INFO] [1495726543.277216401]: send srv, srv.Request.a and b: 2, 3
[INFO] [1495726543.277258018]: receive srv, srv.Response.result: 5

[[[You can't use 'rqt_graph'!! Service is One-way Communication !]]]

[참고] rosservice call 명령어 사용 방법 (This method is better than DOWN.)
$ rosservice call /ros_tutorial_srv 10 2
result: 12
$ rosservice call /ros_tutorial_srv 5 15
result: 20

[참고] GUI 도구인 Service Caller 사용 방법 (This method is difficult than UP.)
• ROS의 GUI 도구인 rqt를 실행하자.
$ rqt
• rqt 프로그램의 메뉴에서 [플러그인(Plugins)] → [서비스(Service)] →
[Service Caller]를 선택하면 다음과 같은 화면이 나온다.
(1) servic에 /ros_tutorial_srv 입력
(2) a = 10, b = 5 입력
(3) Call 버튼을 누른다.
(4) Result에 15라는 값이 표시된다.

So, 하나의 노드는 복수의 퍼블리셔, 서브스크라이버, 서비스 서버, 서비스 클라이언트 역할도 할 수 있다!

make_pkg & give_service_and_take : Using any FORM

ros::Publisher topic_publisher = nh.advertise<ros_tutorials::MsgTutorial>("ros_tutorial_msg", 100);

ros::Subscriber topic_subscriber = nh.subscribe("ros_tutorial_msg", 100, msgCallback);

ros::ServiceServer service_server = nh.advertiseService("ros_tutorial_srv", calculation);

ros::ServiceClient service_client = nh.serviceClient<ros_tutorials::SrvTutorial>("ros_tutorial_srv");

###--------------------------------------------------------------------------------------------

[package.xml]



<?xml version="1.0"?>
<package>
<name>ros_tutorials_service</name>
<version>0.1.0</version>
<description>ROS turtorial package to learn the service</description>
<license>Apache License 2.0</license>
<author email="pyo@robotis.com">Yoonseok Pyo</author>
<maintainer email="pyo@robotis.com">Yoonseok Pyo</maintainer>
<url type="bugtracker">https://github.com/ROBOTIS-GIT/ros_tutorials/issues</url>
<url type="repository">https://github.com/ROBOTIS-GIT/ros_tutorials.git</url>
<url type="website">http://www.robotis.com</url>
<buildtool_depend>catkin</buildtool_depend>
<build_depend>roscpp</build_depend>
<build_depend>std_msgs</build_depend>
<build_depend>message_generation</build_depend>
<run_depend>roscpp</run_depend>
<run_depend>std_msgs</run_depend>
<run_depend>message_runtime</run_depend>
<export></export>
</package>



[CMakeLists.txt]



cmake_minimum_required(VERSION 2.8.3)
project(ros_tutorials_service)
## 캐킨 빌드를 할 때 요구되는 구성요소 패키지이다.
## 의존성 패키지로 message_generation, std_msgs, roscpp이며 이 패키지들이 존재하지 않으면 빌드 도중에 에러가 난다.
find_package(catkin REQUIRED COMPONENTS message_generation std_msgs roscpp)
## 서비스 선언: SrvTutorial.srv (We will use Service file.)
add_service_files(FILES SrvTutorial.srv)
## 의존하는 메시지를 설정하는 옵션이다.
## std_msgs가 설치되어 있지 않다면 빌드 도중에 에러가 난다.
generate_messages(DEPENDENCIES std_msgs)
## 캐킨 패키지 옵션으로 라이브러리, 캐킨 빌드 의존성, 시스템 의존 패키지를 기술한다.
catkin_package(
LIBRARIES ros_tutorials_service
CATKIN_DEPENDS std_msgs roscpp
)
## 인클루드 디렉터리를 설정한다.
include_directories(${catkin_INCLUDE_DIRS})
## service_server 노드에 대한 빌드 옵션이다.
## 실행 파일, 타겟 링크 라이브러리, 추가 의존성 등을 설정한다.
add_executable(service_server src/service_server.cpp)
add_dependencies(service_server ${${PROJECT_NAME}_EXPORTED_TARGETS}
${catkin_EXPORTED_TARGETS})
target_link_libraries(service_server ${catkin_LIBRARIES})
## service_client 노드에 대한 빌드 옵션이다.
add_executable(service_client src/service_client.cpp)
add_dependencies(service_client ${${PROJECT_NAME}_EXPORTED_TARGETS}
${catkin_EXPORTED_TARGETS})
target_link_libraries(service_client ${catkin_LIBRARIES})



[service_server.cpp]



#include "ros/ros.h" // ROS 기본 헤더 파일
#include "ros_tutorials_service/SrvTutorial.h" // SrvTutorial 서비스 파일 헤더 (빌드후 자동 생성됨)
// 서비스 요청이 있을 경우, 아래의 처리를 수행한다
// 서비스 요청은 req, 서비스 응답은 res로 설정하였다
bool calculation(ros_tutorials_service::SrvTutorial::Request &req,
ros_tutorials_service::SrvTutorial::Response &res)
{
// 서비스 요청시 받은 a와 b 값을 더하여 서비스 응답 값에 저장한다
res.result = req.a + req.b;
// 서비스 요청에 사용된 a, b 값의 표시 및 서비스 응답에 해당되는 result 값을 출력한다
ROS_INFO("request: x=%ld, y=%ld", (long int)req.a, (long int)req.b);
ROS_INFO("sending back response: %ld", (long int)res.result);
return true;
}
int main(int argc, char **argv)
{
ros::init(argc, argv, "service_server");
ros::NodeHandle nh;
// 노드 메인 함수
// 노드명 초기화
// 노드 핸들 선언
// 서비스 서버 선언, ros_tutorials_service 패키지의 SrvTutorial 서비스 파일을 이용한
// 서비스 서버 ros_tutorials_service_server를 선언한다
// 서비스명은 ros_tutorial_srv이며 서비스 요청이 있을 때,
// calculation라는 함수를 실행하라는 설정이다
ros::ServiceServer ros_tutorials_service_server = nh.advertiseService("ros_tutorial_srv", calculation);
ROS_INFO("ready srv server!");
ros::spin(); // 서비스 요청을 대기한다
return 0;
}



[service_client.cpp]



#include "ros/ros.h"
// ROS 기본 헤더 파일
#include "ros_tutorials_service/SrvTutorial.h" // SrvTutorial 서비스 파일 헤더 (빌드후 자동 생성됨)
#include <cstdlib> // atoll 함수 사용을 위한 라이브러리
int main(int argc, char **argv)
{
ros::init(argc, argv, "service_client");
// 노드 메인 함수
// 노드명 초기화
if (argc != 3)
// 입력값 오류 처리
{
ROS_INFO("cmd : rosrun ros_tutorials_service service_client arg0 arg1");
ROS_INFO("arg0: double number, arg1: double number");
return 1;
}
ros::NodeHandle nh;
// ROS 시스템과 통신을 위한 노드 핸들 선언
// 서비스 클라이언트 선언, ros_tutorials_service 패키지의 SrvTutorial 서비스 파일을 이용한
// 서비스 클라이언트 ros_tutorials_service_client를 선언한다
// 서비스명은 "ros_tutorial_srv"이다
ros::ServiceClient ros_tutorials_service_client =
nh.serviceClient<ros_tutorials_service::SrvTutorial>("ros_tutorial_srv");
// srv라는 이름으로 SrvTutorial 서비스 파일을 이용하는 서비스를 선언한다
ros_tutorials_service::SrvTutorial srv;
// 서비스 요청 값으로 노드가 실행될 때 입력으로 사용된 매개변수를 각각의 a, b에 저장한다
srv.request.a = atoll(argv[1]);
srv.request.b = atoll(argv[2]);
// 서비스를 요청하고, 요청이 받아들여졌을 경우, 응답 값을 표시한다
if (ros_tutorials_service_client.call(srv))
{
ROS_INFO("send srv, srv.Request.a and b: %ld, %ld", (long int)srv.request.a, (long int)srv.request.b);
ROS_INFO("receive srv, srv.Response.result: %ld", (long int)srv.response.result);
}
else
{
ROS_ERROR("Failed to call service ros_tutorial_srv");
return 1;
}
return 0;
}

