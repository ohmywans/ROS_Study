Parameter -->  Parameter 을 실제로 적용하지는 않은 상태 !!!
이전 강의에서는 작성한 서비스 서버와 클라이언트 노드에서 service_server.cpp 소스를 수정하여 서비스 요청으로 입력된 a와 b를 단순히 덧셈하는 것이 아니라, 사칙연산을 할 수 있도록 파라미터를 활용해 볼 것이다.
다음 순서대로 service_server.cpp 소스를 수정해보자.

$ roscd ros_tutorials_service/src
$ gedit service_server.cpp

$ cd ~/catkin_ws
$ catkin_make

$ rosrun ros_tutorials_service service_server
[INFO] [1495767130.149512649]: ready srv server!

$ rosparam list
/calculation_method
/rosdistro
/rosversion
/run_id

$ rosservice call /ros_tutorial_srv 10 5 → 사칙연산의 변수 a, b 입력
result: 15 → 디폴트 사칙연산인 덧셈 결괏값

$ rosparam set /calculation_method 2 
$ rosservice call /ros_tutorial_srv 10 5 → 뺄셈
result: 5 

$ rosparam set /calculation_method 3 
$ rosservice call /ros_tutorial_srv 10 5 → 곱셈
result: 50

$ rosparam set /calculation_method 4
$ rosservice call /ros_tutorial_srv 10 5 → 나눗셈
result: 2 

###---------------------------------------------------------------

[service_server.cpp]

#include "ros/ros.h" // ROS 기본 헤더파일
#include "ros_tutorials_service/SrvTutorial.h" // SrvTutorial 서비스 파일 헤더 (빌드 후 자동 생성됨)
#define PLUS		1 // 덧셈
#define MINUS		2 // 빼기
#define MULTIPLICATION	3 // 곱하기
#define DIVISION		4 // 나누기

int g_operator = PLUS;
// 서비스 요청이 있을 경우, 아래의 처리를 수행한다
// 서비스 요청은 req, 서비스 응답은 res로 설정하였다
bool calculation(ros_tutorials_service::SrvTutorial::Request &req,
ros_tutorials_service::SrvTutorial::Response &res)
{
// 서비스 요청시 받은 a와 b 값을 파라미터 값에 따라 연산자를 달리한다.
// 계산한 후 서비스 응답 값에 저장한다
switch(g_operator)
{
case PLUS:
res.result = req.a + req.b; break;

case MINUS:
res.result = req.a - req.b; break;

case MULTIPLICATION:
res.result = req.a * req.b; break;

case DIVISION:
if(req.b == 0){
res.result = 0; break;
}
else{
res.result = req.a / req.b; break;
}
default:
res.result = req.a + req.b; break;
}
// 서비스 요청에 사용된 a, b값의 표시 및 서비스 응답에 해당되는 result 값을 출력한다
ROS_INFO("request: x=%ld, y=%ld", (long int)req.a, (long int)req.b);
ROS_INFO("sending back response: [%ld]", (long int)res.result);
return true;
}
int main(int argc, char **argv)
{
ros::init(argc, argv, "service_server");
// 노드 메인 함수
// 노드명 초기화
ros::NodeHandle nh; // ROS 시스템과 통신을 위한 노드 핸들 선언
nh.setParam("calculation_method", PLUS); // 매개변수 초기설정
// 서비스 서버 선언, ros_tutorials_service 패키지의 SrvTutorial 서비스 파일을 이용한
// 서비스 서버 service_server를 작성한다. 서비스명은 "ros_tutorial_srv"이며,
// 서비스 요청이 있을 때, calculation라는 함수를 실행하라는 설정이다.
ros::ServiceServer ros_tutorial_service_server = nh.advertiseService("ros_tutorial_srv", calculation);
ROS_INFO("ready srv server!");

ros::Rate r(10); // 10 hz

while (1)
{
nh.getParam("calculation_method", g_operator); // 연산자를 매개변수로부터 받은 값으로 변경한다
ros::spinOnce(); // 콜백함수 처리루틴
r.sleep(); // 루틴 반복을 위한 sleep 처리
} 

return 0;
}
